import logging
import aiogram.utils.markdown as fmt
from aiogram import Bot, Dispatcher, executor, types
from aiogram.bot import api
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import telegram_api
import markup
from bot import run, get_movie_url_year_name, get_trailer, get_kp_trailer   # get_trailer –∏ get_kp_trailer –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã
from markup import kb_month

bot = Bot(token=telegram_api)
dp = Dispatcher(bot, storage=MemoryStorage())

class FSMuser(StatesGroup):
    state_main = State()
    state_searching = State()


@dp.message_handler(commands=['help'], state=FSMuser.state_main)
@dp.message_handler(commands=['help'], state=None)
async def command_help(message: types.Message, state: FSMContext):
    await message.reply('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–∏–Ω–æ–∫ (–∏ –Ω–µ —Ç–æ–ª—å–∫–æ) –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∫–∏–Ω–æ!\n\n'
                        '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –≥–æ–¥ –∏ –º–µ—Å—è—Ü —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞ —Ñ–∏–ª—å–º–∞. '
                        '–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞, –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, '
                        '–Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å–º–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ, –º–æ–∂–Ω–æ –µ—â–µ –∏ –Ω–∞–π—Ç–∏ —Ç—Ä–µ–π–ª–µ—Ä –∫ –Ω–µ–º—É!\n\n'
                        '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                        '/start - –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º,\n'
                        '/reload - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
                        '/help - –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n\n'
                        '–í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–æ–π –æ—Ç –±–æ—Ç–∞, '
                        '—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –±–µ–∑ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, '
                        '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n\n–£–¥–∞—á–∏! üòâ')



@dp.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'], state=FSMuser.state_main)
@dp.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'], state=None)
async def command_start(message: types.Message, state: FSMContext):
    await FSMuser.state_main.set()
    async with state.proxy() as data:
        data['movies'] = []
        data['chosen_month'] = '–Ω–µ –≤—ã–±—Ä–∞–Ω'
        data['month'] = None
        data['chosen_year'] = '–Ω–µ –≤—ã–±—Ä–∞–Ω'
        data['year'] = None
        data['rating'] = 0
        data['genre'] = ''
        data['chosen_genre'] = '–ª—é–±–æ–π'
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n–ü–æ –∫–∞–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º—ã?'.format(message.from_user), reply_markup=markup.kb_main)


@dp.message_handler(commands=['reload', '–æ–±–Ω–æ–≤–∏—Ç—å'], state=FSMuser.state_main)
@dp.message_handler(commands=['reload', '–æ–±–Ω–æ–≤–∏—Ç—å'], state=None)
async def command_reload(message: types.Message, state: FSMContext):
    await state.finish()
    await FSMuser.state_main.set()
    async with state.proxy() as data:
        data['movies'] = []
        data['chosen_month'] = '–Ω–µ –≤—ã–±—Ä–∞–Ω'
        data['month'] = None
        data['year'] = None
        data['chosen_year'] = '–Ω–µ –≤—ã–±—Ä–∞–Ω'
        data['rating'] = 0
        data['genre'] = ''
        data['chosen_genre'] = '–ª—é–±–æ–π'
    await message.reply('–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', reply_markup=markup.kb_main)

@dp.message_handler(Text(equals='–º–µ—Å—è—Ü', ignore_case=True), state=FSMuser.state_main)
async def command_month(message: types.Message, state: FSMContext):
    await message.reply('–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', reply_markup=markup.kb_month)

@dp.message_handler(Text(equals='–ì–æ–¥ –∏ –º–µ—Å—è—Ü', ignore_case=True), state=FSMuser.state_main)
async def command_year(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.reply(f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –º–µ—Å—è—Ü <b>{data["chosen_month"]}</b>, –≥–æ–¥ <b>{data["chosen_year"]}</b>', reply_markup=markup.kb_year, parse_mode='html')

@dp.message_handler(Text(equals='–∂–∞–Ω—Ä', ignore_case=True), state=FSMuser.state_main)
async def command_genre(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.reply(f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - <b>{data["chosen_genre"]}</b>, –µ–≥–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=markup.kb_genre, parse_mode='html')

@dp.message_handler(Text(equals='—Ä–µ–π—Ç–∏–Ω–≥', ignore_case=True), state=FSMuser.state_main)
async def command_rating(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.reply(f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - <b>{data["rating"]}</b>, –µ–≥–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=markup.kb_rating, parse_mode='html')


@dp.message_handler(Text(equals='–Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', ignore_case=True), state=FSMuser.state_main)
async def command_parse(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data['month'] and data['year']:
            kb_main = types.ReplyKeyboardRemove()
            await message.reply('–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...', reply_markup=kb_main)
            await FSMuser.state_searching.set()
            data = await run(data)

                                                        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∏–ª—å–º–æ–≤
            btns_movie = [None] * len(data['movies'])
            count = 0                                   # –∫–∞—É–Ω—Ç–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
            for i in data['movies']:
                btns_movie[count] = types.InlineKeyboardButton(text=f'{round(i.rating, 1)}  {i.nameRu}', callback_data=f'f_{i.id}')
                count += 1
            kb_movie = InlineKeyboardMarkup(row_width=1).add(*btns_movie)
            if count == 0:
                await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ :(')
            else:
                await message.answer('–ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ –æ–∫–æ–Ω—á–µ–Ω! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:', reply_markup=kb_movie)


            await FSMuser.state_main.set()
            await message.answer('–û–±—Ä–∞—â–∞–π—Å—è –µ—â–µ :)', reply_markup=markup.kb_start)
        elif data['year'] == None and data['month']:
            await message.answer('–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≥–æ–¥!')
        elif data['month'] == None and data['year']:
            await message.answer('–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü!')
        elif data['month'] == None and data['year'] == None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≥–æ–¥ –∏ –º–µ—Å—è—Ü!')


def movie_info(id, data):
    for movie in data['movies']:
        if movie.id == id:
            genres = str(movie.genres)
            genres = genres.replace('[', '').replace(']', '').replace('\'', '')
            countries = str(movie.countries)
            countries = countries.replace('[', '').replace(']', '').replace('\'', '')
            rating = round(movie.rating, 1)

    link, year, name = get_movie_url_year_name(id)
    link = fmt.hide_link(link)
    msg_text = f"{link}{countries}  {rating}\n({genres})"
    return msg_text


@dp.callback_query_handler(state=None)
@dp.callback_query_handler(state=FSMuser.state_main)
async def cmd_callback(call: types.CallbackQuery, state: FSMContext):
    msg = call.data
    value = msg.split("_")[-1]
    month = msg.split("_")[1]
    any_genre = msg.split("_")[1]
    if msg.startswith('m_'):
        async with state.proxy() as data:
            data['month'] = month
            data['chosen_month'] = value
        await call.message.edit_reply_markup()
        await call.message.answer(f'–ú–µ—Å—è—Ü: <b>{value}</b>', parse_mode='html')
    if msg.startswith('y_'):
        async with state.proxy() as data:
            data['year'] = value
            data['chosen_year'] = value
        await call.message.edit_reply_markup(reply_markup=kb_month)
        await call.message.answer(f'–ì–æ–¥ <b>{value}</b>-–π', parse_mode='html')
    if msg.startswith('g_'):
        if any_genre == '':
            async with state.proxy() as data:
                data['genre'] = ''
                data['chosen_genre'] = '–ª—é–±–æ–π'
        else:
            async with state.proxy() as data:
                data['genre'] = value
                data['chosen_genre'] = value
        await call.message.edit_reply_markup()
        await call.message.answer(f'–ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ "<b>{value}</b>"!', parse_mode='html')
    if msg.startswith('r_'):
        async with state.proxy() as data:
            data['rating'] = value
        await call.message.edit_reply_markup()
        await call.message.answer(f'–° —Ä–µ–π—Ç–∏–Ω–≥–æ–º <b>{value}</b> –∏ –≤—ã—à–µ', parse_mode='html')
    if msg.startswith('f_'):
        async with state.proxy() as data:
            link, year, name = get_movie_url_year_name(value)
            btn_trailer = types.InlineKeyboardButton(text=f'–ù–∞–π—Ç–∏ —Ç—Ä–µ–π–ª–µ—Ä', callback_data=f't_{value}')
            kb_trailer = InlineKeyboardMarkup(row_width=2, resize_keyboard=True).add(btn_trailer)
            try:
                await call.message.answer(f"{movie_info(value, data)}", parse_mode=types.ParseMode.HTML, reply_markup=kb_trailer)
            except UnboundLocalError:
                await call.message.answer("–≠—Ç–∏ –∫–Ω–æ–ø–∫–∏ —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª–∏...", parse_mode=types.ParseMode.HTML)
            except Exception:
                await call.message.answer(f"{movie_info(value, data)}", parse_mode=types.ParseMode.HTML)


    if msg.startswith('t_'):

        await call.message.answer(f"{(fmt.hide_link(await get_trailer(value)))}", parse_mode=types.ParseMode.HTML)

    await call.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–∏–ª–∞—Å—å')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

